package model;

import exceptions.InvalidInputException;

import java.util.*;

public class Person implements Observer{
    private String userName;
    private String emailAddress;
    private String passWord;
    private String gender;

    private MediaList movieList;
    private MediaList TVShowList;


    private static int userNum = 100;

    //MODIFIES: this
    //EFFECTS: constructs a person object with default information that generated by the system automatically
    public Person() {
        this.userName = "user" + userNum;
        userNum++;
        this.emailAddress = "none";
        this.passWord = "none";
        this.gender = "not specify";
        this.movieList = new MediaList(this);
        this.TVShowList = new MediaList(this);
    }

    //MODIFIES: this
    //EFFECTS: constructs a person object with valid personalized information
    public Person(String name, String eAddress, int g) {
        if(name == null) {
            this.userName = "user" + userNum;
            userNum++;
        }
        if(eAddress == null) {
            this.emailAddress = "none";
        }
        else {
            this.userName = name;
            this.emailAddress = eAddress;
        }
        this.gender = setGender(g);
        this.movieList = new MediaList(this);
        this.TVShowList = new MediaList(this);
    }

    //EFFECTS: return person's gender in string according to their input
    public String setGender(int g) {
        String gender;
        if(g == 1) { gender = "Female"; }
        else if(g == 2) { gender = "Male"; }
        else if(g == 3) { gender = "Trans"; }
        else {gender = "rather not tell"; }
        return gender;
    }

    public void setPassword(String pw) {
        this.passWord = pw;
    }

    public String getName() {
        return this.userName;
    }

    //MODIFIES: MediaDataBase dataBase
    //EFFECTS: add movies and TV shows to this person's two wish lists respectively based on their input numbers
//    public void addToWishList(String numbers, MediaDataBase movieDataBase, MediaDataBase tvShowDataBase) throws InvalidInputException {
//        String[] numberList = numbers.split(" ");
//        for(String num: numberList) {
//            int favNum = Integer.parseInt(num);
//            Media aMedia;
//            int boundSize = movieDataBase.getMediaDataBaseSize() + tvShowDataBase.getMediaDataBaseSize();
//            InputIdentifier identifier = new InputIdentifier();
//            int number = identifier.identifyInput(favNum, boundSize);
//
//            if(number <= movieDataBase.getMediaDataBaseSize()) {
//                aMedia = movieDataBase.getAMedia(number);
//                movieList.addToMediaList(aMedia);
//
//            }
//            else if(number <= (movieDataBase.getMediaDataBaseSize() + tvShowDataBase.getMediaDataBaseSize())){
//                aMedia = tvShowDataBase.getAMedia(number - movieDataBase.getMediaDataBaseSize());
//                TVShowList.addToMediaList(aMedia);
//            }
//        }
//    }

    public void addToWishList(String mediarName, MediaDataBase movieDataBase, MediaDataBase tvShowDataBase) throws InvalidInputException {
        Media aMedia;
        if(movieDataBase.containMedia(mediarName)) {
            aMedia = movieDataBase.getAMedia(mediarName);
            movieList.addToMediaList(aMedia);
        }
        else {
            aMedia = tvShowDataBase.getAMedia(mediarName);
            TVShowList.addToMediaList(aMedia);
        }

    }
    //EFFECTS: returns the movieList
    public MediaList getMovieList() {
        return this.movieList;
    }
    //EFFECTS: returns the TVShowList
    public MediaList getTVShowList() {
        return this.TVShowList;
    }

    public void deleteFromWishList(int deleteNum, String type) {
        if(type.equals("M")) {
            movieList.deleteMedia(deleteNum);
        }
        else {
            TVShowList.deleteMedia(deleteNum);
        }
    }

    //EFFECTS: prints out the user's information
    public void printOutProfileInfo() {
        System.out.println(userName + '\n' + "email: " + emailAddress + '\n' + "Password: " + passWord + '\n' + "Gender: " + gender);
    }

    @Override
    public void update(Observable o, Object arg) {
        Media aMedia = (Media) o; //Media is an abstract class, could be Movie or TVShow that be passed in
        int numOfLikers = aMedia.getNumOfFollower();
        System.out.println("There are " + numOfLikers + " users that also like " + aMedia.getMediaName());
    }
}
